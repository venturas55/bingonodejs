<div class="container-fluid">
  <div id="app">
    <div v-if="lineaCantada">
      LINEA CANTADA!
    </div>
    <div class="contenedorFlex flexRow flexLeft">
      <div class="contenedorFlex flexColumn flexCenter">
        <h4 v-if="gameState!=0">Bola nº {{ronda}} quedan {{numBolasFaltan}} </h4>
        <p> Jugadores <input type="text" v-model="cartonesVendidos" size="2" type="number"> Precio carton <input
            type="text" v-model="precioCarton" size="2" type="number"> € . Total recaudado {{recaudadoRonda}} € </p>


      </div>
      <div class="contenedorFlex flexColumn flexCenter">
        <button v-if="gameState==0" class="boton sizeL item" @click="comenzarBingo()" id="botonStart">COMENZAR
          BINGO</button>
        <button v-if="gameState==1 && !lineaCantada && ronda>4" class="boton sizeL item"
          @click="pausar();cantar();">LINEA!</button>
        <button v-if="gameState==1 && lineaCantada && ronda>14" class="boton sizeL item"
          @click="pausar();cantar();">BINGO!</button>

        <span>Carton a verificar:</span> <span> <input size="3" v-if="gameState==3" type="number" name="cartonNum"
            id="cartonNum" v-model="cartonNum" min="1" max="48"></span>
        <button v-if="gameState==3 && !lineaCantada" class="boton  item" @click="verificar('linea')">VERIFICAR LINEA
        </button>
        <button v-if="gameState==3 && lineaCantada" class="boton  item" @click="verificar('bingo')">VERIFICAR BINGO
        </button>
        <button v-if="gameState==3 && !lineaCantada" class="boton  item" @click="cantadoEs('linea',true)">LINEA
          CORRECTA</button>
        <button v-if="gameState==3 && !lineaCantada" class="boton  item" @click="cantadoEs('linea',false)">LINEA
          INCORRECTA</button>
        <button v-if="gameState==3 && lineaCantada" class="boton  item" @click="cantadoEs('bingo',true)">BINGO
          CORRECTO</button>
        <button v-if="gameState==3 && lineaCantada" class="boton  item" @click="cantadoEs('bingo',false)">BINGO
          INCORRECTO</button>
        <button v-if="gameState==1" class="boton sizeL item" @click="pausar();">PAUSAR</button>
        <button v-if="gameState==2" class="boton sizeL item" @click="reanudar()">REANUDAR BINGO</button>
      </div>
      <div class="contenedorFlex flexColumn flexCenter">
        <p>La LINEA se paga a: {{premioLinea}} €</p>
        <p>El BINGO se paga a: {{premioBingo}} €</p>
        <p>PRIMA: {{premioAcumulado}} €</p>
      </div>

    </div>


    <!-- BODY -->
    <div class="containerBody">

      <div id="marcador">
      </div>
      <div id="panelBolas"></div>
      <h4> {{partidasSinprima}} partidas sin PRIMA. </h4>
      <button v-if="gameState==2" class="boton item" @click="reseteo()">ABORTAR BINGO </button>


      <br>
    </div>


    <input type="text" id="messages">

    <!-- MODAL OPCIONES -->
    <div class="contenedorModal" v-show="verOpciones">
      <div class="header">
        <button class="close" @click="verOpciones=false">X</button>
        <h1>OPCIONES</h1>
      </div>
      <div>
        <div>
          <span> Porcentaje acumulado</span>
          <input v-model="acumuladoPorcentaje" type="number">
        </div>

        <div>
          <span>Tiempo entre bolas</span>
          <input v-model="tiempo" type="number">

        </div>
        <button class="boton" @click="verOpciones=false">CERRAR</button>
      </div>
    </div>
  </div>
</div>


<script>
  var app = new Vue({
    el: "#app",
    data: {
      tiempo: 4,
      bolasEnSaco: [],
      bolasSacadas: [],
      verOpciones: false,
      intervalId: 0,
      lineaCantada: false,
      bingoCantado: false,
      gameState: 0,
      ronda: 0,
      partidasSinprima: -1,
      precioCarton: 0.5,
      cartonesVendidos: 4,
      acumuladoPorcentaje: 15,
      premioAcumulado: 0,
      cartonNum: 1,
      cartones: [[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]],
      //1
      [[2, 25, 36, 57, 81], [4, 17, 20, 64, 86], [32, 46, 53, 68, 75]],
      [[26, 34, 47, 66, 83], [12, 22, 39, 51, 87], [3, 19, 44, 55, 70]],
      [[14, 28, 43, 61, 82], [8, 31, 50, 63, 77], [9, 10, 37, 72, 84]],
      [[13, 21, 42, 60, 90], [18, 29, 48, 54, 71], [1, 30, 56, 65, 79]],
      [[15, 24, 40, 58, 73], [27, 45, 67, 76, 89], [6, 38, 52, 69, 80]],
      [[23, 41, 62, 78, 85], [5, 16, 33, 59, 88], [7, 11, 35, 49, 74]],
      [[1, 14, 50, 64, 77], [21, 35, 54, 67, 80], [17, 28, 39, 40, 73]],
      [[11, 20, 34, 55, 81], [2, 16, 24, 41, 62], [9, 30, 45, 68, 74]],
      [[3, 27, 44, 56, 70], [6, 18, 37, 59, 83], [36, 48, 61, 76, 87]],
      [[13, 42, 58, 65, 89], [15, 33, 49, 72, 86], [5, 26, 53, 69, 82]],
      //11
      [[12, 38, 52, 78, 85], [7, 29, 46, 75, 88], [19, 23, 57, 60, 90]],
      [[4, 22, 43, 71, 84], [10, 31, 47, 63, 79], [8, 25, 32, 51, 66]],
      [[8, 21, 42, 63, 75], [14, 26, 33, 50, 80], [38, 47, 56, 68, 84]],
      [[18, 36, 55, 60, 87], [9, 15, 40, 59, 72], [3, 20, 49, 64, 79]],
      [[12, 39, 52, 66, 83], [7, 31, 57, 74, 90], [5, 28, 45, 69, 77]],
      [[1, 24, 41, 53, 73], [4, 10, 27, 35, 61], [16, 29, 46, 67, 82]],
      [[2, 13, 48, 62, 81], [17, 30, 43, 70, 86], [22, 34, 54, 76, 88]],
      [[6, 19, 32, 51, 85], [11, 23, 37, 65, 78], [25, 44, 58, 71, 89]],
      [[14, 36, 48, 50, 61], [17, 38, 54, 72, 83], [5, 22, 46, 68, 79]],
      [[16, 33, 55, 71, 80], [8, 21, 40, 77, 84], [19, 37, 65, 76, 88]], //20
      //21 
      [[7, 23, 41, 62, 70], [10, 32, 53, 66, 87], [13, 28, 44, 59, 89]],
      [[6, 27, 43, 56, 69], [15, 30, 58, 75, 82], [2, 29, 47, 64, 90]],
      [[9, 20, 45, 67, 78], [11, 34, 51, 73, 85], [4, 25, 39, 57, 74]],
      [[1, 12, 24, 35, 49], [18, 31, 52, 60, 86], [3, 26, 42, 63, 81]],
      [[2, 24, 40, 55, 77], [3, 18, 35, 61, 82], [10, 28, 46, 69, 79]],
      [[11, 26, 42, 62, 83], [4, 31, 48, 56, 72], [20, 36, 59, 67, 84]],
      [[12, 33, 44, 51, 63], [16, 39, 57, 71, 90], [1, 22, 50, 74, 87]],
      [[7, 15, 34, 45, 75], [27, 49, 68, 70, 81], [6, 21, 53, 66, 89]],
      [[8, 14, 37, 43, 78], [9, 17, 29, 60, 88], [23, 38, 54, 65, 85]],
      [[5, 13, 41, 52, 80], [19, 30, 58, 64, 76], [25, 32, 47, 73, 86]],//30
      //31
      [[1, 21, 45, 60, 82], [7, 28, 32, 51, 87], [14, 38, 64, 71, 85]],
      [[15, 27, 42, 59, 73], [2, 19, 46, 63, 84], [9, 20, 36, 54, 88]],
      [[11, 35, 49, 77, 80], [3, 29, 52, 65, 74], [8, 33, 41, 58, 79]],
      [[18, 24, 47, 50, 62], [6, 26, 31, 70, 83], [13, 37, 48, 56, 69]],
      [[12, 40, 61, 76, 89], [5, 23, 39, 55, 86], [16, 25, 43, 67, 78]],
      [[17, 30, 53, 72, 81], [4, 10, 44, 66, 75], [22, 34, 57, 68, 90]],//36
      //37
      [[2, 38, 52, 69, 79], [19, 30, 44, 71, 87], [6, 27, 53, 67, 82]],
      [[3, 11, 22, 39, 57], [16, 31, 40, 62, 85], [5, 23, 45, 64, 81]],
      [[10, 35, 54, 72, 86], [14, 43, 66, 74, 88], [25, 37, 47, 58, 78]],
      [[1, 12, 33, 42, 76], [17, 20, 48, 59, 63], [7, 29, 51, 70, 83]],//40
      //41
      [[4, 26, 41, 73, 80], [15, 21, 55, 60, 84], [8, 34, 49, 56, 68]],
      [[9, 18, 36, 61, 77], [13, 24, 46, 65, 90], [28, 32, 50, 75, 89]],
      [[8, 34, 53, 67, 85], [10, 41, 55, 72, 89], [4, 23, 38, 45, 61]],
      [[15, 29, 49, 68, 75], [13, 35, 51, 70, 83], [5, 26, 54, 63, 86]],
      [[1, 17, 43, 57, 81], [21, 37, 48, 66, 87], [14, 31, 50, 62, 73]],
      [[6, 25, 36, 74, 84], [3, 18, 28, 65, 77], [20, 30, 44, 60, 88]],
      [[19, 33, 46, 64, 78], [7, 39, 52, 69, 82], [12, 24, 42, 59, 71]],
      //48
      [[16, 27, 40, 76, 90], [9, 11, 32, 56, 79], [2, 22, 47, 58, 80]],
      ],

      //0 partida sin empezar o acabado
      //1 partida 0N
      //2 partida PAUSE
      //3 partida VERIFICANDO

      //4 verificando bingo =>PAUSE
      //5 bingo correcto   =>PAUSE
      //6 juego pausado     =>PAUSE
    },
    mounted: function () {
      this.reseteo();
      socket.on("lineaSolicitada", data => {
        console.log("Han solicitado linea. Carton nº: " + data);
        this.pausar();
        this.cantar();
        this.verificar("linea", data);
      });
      socket.on("bingoSolicitado", data => {
        console.log("Han solicitado bingo. Carton nº: " + data);
        this.pausar();
        this.cantar();
        this.verificar("bingo", data);
      });
      socket.on('connect', () => {
        console.log(socket.id);
        document.getElementById("socketid").innerHTML = socket.id;
      });

    },
    computed: {
      numBolasFaltan() {
        return parseFloat(90 - this.bolasSacadas.length);
      },
      recaudadoRonda() {
        return parseFloat(this.cartonesVendidos * this.precioCarton);
      },
      premioLinea() {
        if (this.acumuladoPorcentaje == 0)
          return parseFloat(this.recaudadoRonda * 0.3).toFixed(2);
        else
          return parseFloat(this.recaudadoRonda * 0.3 - this.recaudadoRonda * this.acumuladoPorcentaje / 200).toFixed(2);
      },
      premioBingo() {

        if (this.acumuladoPorcentaje == 0)
          return parseFloat(this.recaudadoRonda * 0.7).toFixed(2);
        else
          return parseFloat(this.recaudadoRonda * 0.7 - this.recaudadoRonda * this.acumuladoPorcentaje / 200).toFixed(2);
      },

      premioAcumuladoRonda() {
        return parseFloat(this.recaudadoRonda * this.acumuladoPorcentaje / 100).toFixed(2);
      },
    },
    methods: {
      sacarBola: async function () {
        {

          if (this.bolasEnSaco.length > 0 && this.gameState == 1) {
            this.ronda++;
            //Veo las bolas que hay en el cesto antes de sacar la nueva
            var marcador = document.getElementById("marcador");
            var bolasenMarcador = marcador.childNodes;

            if (bolasenMarcador.length >= 1) {
              bolasenMarcador[bolasenMarcador.length - 1].classList.remove("saleBola");
            }

            //Para sacar una bola
            var ultimaBola = this.BolaAleatoria(); //indice de bolasEnSaco
            //La meto en las bolas sacadas
            this.bolasSacadas.push(ultimaBola);

            socket.emit('bolas', { 'bolas': this.bolasSacadas, 'lineaCantada': this.lineaCantada, 'bingoCantado': this.bingoCantado });


            //La pinto en el panel de bolas
            document.getElementById("bola" + ultimaBola).style.opacity = 1;
            //texto para cantar
            await this.decir(ultimaBola, "Spanish Female");
            //--------------------
            //Creo la bola en el diseño grafico
            var bola = document.createElement("div");
            bola.appendChild(document.createTextNode(this.bolasSacadas[this.bolasSacadas.length - 1]));
            bola.className = "bola saleBola";
            bola.innerHTML = this.bolasSacadas[this.bolasSacadas.length - 1];
            marcador.appendChild(bola);
            //------------
            //Para que vayan rodando para atras
            //cuando hay más de 4, las bolas en la cesta las roto
            if (bolasenMarcador.length > 5) {
              this.rotar(bolasenMarcador);
            }

            //Para ir eliminado bolas visuales.
            if (marcador.childElementCount > 6) {
              marcador.removeChild(marcador.firstElementChild);
            }
          } else {
            console.log("Bingo finalizado");
            this.gameState = 3;
            this.pausar();
            await this.decir("Imposible que nadie haya cantado bingo. Menuda panda de subnormales", "Spanish Female");
          }
        }
      },
      sacarBolas: async function () {
        this.gameState = 1;
        this.intervalId = setInterval(this.sacarBola, this.tiempo * 1000);
      },
      comenzarBingo: async function () {
        if (this.gameState != 1) {
          this.sacarBolas();
        }
      },
      pausar: function () {
        this.gameState = 2;
        clearInterval(this.intervalId);

      },
      reanudar: function () {
        this.sacarBolas();


      },
      cantar: async function () {
        this.gameState = 3;
        if (!this.lineaCantada)
          await this.decir("Han cantado linea", "Spanish Female");
        else {
          await this.decir("Han cantado bingo", "Spanish Female");
        }
      },
      verificar: async function (item, ref) {
        var flagLinea = false;
        var flagBingo = false;
        var countLinea = 0;
        var countBingo = 0;
        if (item == 'linea') {
          for (var i = 0; i < 3; i++) {
            if (!flagLinea) {
              for (var j = 0; j < 9; j++) {
                if (this.haSalido(this.cartones[ref][i][j])) {
                  console.log(this.cartones[ref][i][j]);
                  countLinea++;
                }
              }
              console.log("countLinea: " + countLinea);
              if (countLinea == 5) {
                flagLinea = true;
                break;
              }
              countLinea = 0;
            }
          }
          if (flagLinea) {
            //alert("Hay linea en el carton: " + ref + " en la linea " + (i + 1));
            console.log("Hay linea en el carton: " + ref + " en la linea " + (i + 1));
            this.cantadoEs("linea", true);
          } else {
            //alert("No hay linea en el carton: " + ref);
            console.log("No hay linea en el carton: " + ref);
            this.cantadoEs("linea", false);
          }
        } else
          if (item == 'bingo') {
            console.log(this.cartones[ref]);
            for (var i = 0; i < 3; i++) {
              for (var j = 0; j < 9; j++) {
                if (this.haSalido(this.cartones[ref][i][j])) {
                  console.log(this.cartones[ref][i][j]);
                  countBingo++;
                }
              }
            }
            console.log("countBingo: " + countBingo);
            if (countBingo == 15) {
              flagBingo = true;
            }

            if (flagBingo) {
              //alert("El carton: " + ref + " tiene BINGO");
              console.log("El carton: " + ref + " tiene BINGO");
              this.cantadoEs("bingo", true);
            } else {
              //alert("El carton: " + ref + " NO tiene BINGO");
              console.log("El carton: " + ref + " NO tiene BINGO");
              this.cantadoEs("bingo", false);
            }
          }

      },
      haSalido: function (num) {
        for (var i = 0; i < this.bolasSacadas.length; i++) {
          if (this.bolasSacadas[i] == num) {
            return true;
          }
        }
        return false;
      },
      cantadoEs: async function (tipo, flag) {
        if (tipo == "linea") {
          if (flag) {
            await this.decir(
              "La linea es correcta. Continuamos para bingo!",
              "Spanish Female"
            );
            this.lineaCantada = true;
            socket.emit('lineaCantada', this.lineaCantada);

          } else {
            await this.decir(
              "La linea no es correcta. Hay que estar más atento, ¡Capullo!",
              "Spanish Female"
            );
          }
          this.gameState = 2;
        }
        if (tipo == "bingo") {
          if (flag) {
            await this.decir(
              "El bingo es correcto, TENEMOS GANADOR GANADORA!",
              "Spanish Female"
            );

            if (this.ronda <= (40 + this.partidasSinprima)) {
              await this.decir(
                "y encima se lleva los " + this.premioAcumulado + " de PRIMA",
                "Spanish Female"
              );
              this.partidasSinprima = -1;
              this.premioAcumulado = 0;
            }



            this.bingoCantado = true;
            socket.emit('bingoCantado', this.bingoCantado);
            this.reseteo();
            clearInterval(this.intervalId);

          } else {
            await this.decir(
              "El bingo no es correcto. Hay que estar más atento, Subnormal!",
              "Spanish Female"
            );
            this.gameState = 2;
          }
        }
      },
      BolaAleatoria: function () {
        var indice = Math.floor(Math.random() * this.bolasEnSaco.length);
        var ultimaBola = this.bolasEnSaco[indice];
        //la saco del saco
        this.bolasEnSaco.splice(indice, 1);
        return ultimaBola;
      },
      rellenarSaco: function () {
        this.bolasEnSaco = [];
        for (var i = 1; i <= 90; i++) {
          this.bolasEnSaco.push(i);
        }
      },
      reseteo: function () {
        clearInterval(this.intervalId);
        this.gameState = 0;

        //console.log("Partida acabada en reseteo interval: " + this.intervalId);
        this.ronda = 0;
        this.lineaCantada = false;
        this.bingoCantado = false;
        this.bolasSacadas = [];
        this.partidasSinprima++;
        this.premioAcumulado = parseFloat(parseFloat(this.premioAcumulado) + parseFloat(this.premioAcumuladoRonda)).toFixed(2);

        //console.log("Partida acabada en reseteo2 gamestate: " + this.gameState);
        var marc = document.getElementById("marcador");
        marc.innerText = "";
        var sel = document.getElementById("panelBolas");
        sel.innerText = "";
        this.rellenarSaco();
        for (var i = 1; i <= 90; i++) {
          var div = document.createElement("div");
          div.appendChild(document.createTextNode(i));
          div.className = "bola";
          div.id = "bola" + i;
          div.innerHTML = i;
          div.style.opacity = 0.3;
          sel.appendChild(div);
        }
      },
      decir: async function (bolaAcantar, idioma) {
        var cantar;
        const FRASES = {
          '1': '1 ...con mi nepe te vacuno',
          '2': '2 ...tocamelos',
          '5': '5 ...por el culo te la inco',
          '7': '7 ...te la meto en el retrete',
          '9': '9 ...en tu culo se mueve',
          '11': '11 ...la tengo de bronce',
          '19': '19 ...me lo chupas mientras llueve',
          '21': 'tres por culo ... 21',
          '29': '29 ...en tu culo se mueve',
          '39': '39 ...en tu culo se mueve',
          '49': '49 ...en tu culo se mueve',
          '59': '59 ...en tu culo se mueve',
          '89': '89 ...en tu culo se mueve',
          '25': '25 ...por el culo te la inco',
          '35': '35 ...por el culo te la inco',
          '45': '45 ...por el culo te la inco',
          '55': '55 ...por el culo te la inco',
          '85': '85 ...por el culo te la inco',
          '8': '8 ...por el culo te la empocho',
          '18': '18 ...por el culo te la empocho',
          '28': '28 ...por el culo te la empocho',
          '38': '38 ...por el culo te la empocho',
          '48': '48 ...por el culo te la empocho',
          '58': '58 ...por el culo te la empocho',
          '88': '88 ...por el culo te la empocho',
          '13': '13 ...agarramela que me crece',
          '90': '90 ...o no te entra',
        }
        cantar = FRASES[bolaAcantar] || bolaAcantar.toString();
        let a = cantar.charAt(0);
        let b = cantar.charAt(1);
        let extra = a + " " + b;
        if ((a === '6' || a === '7') && cantar.length > 1) {
          cantar = cantar + " ... " + extra;
        }
        await responsiveVoice.speak(cantar, idioma);
      },
      sleep: function (ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
        //use as    await sleep(<duration>);
      },
      rotar: async function (bolas) {
        for (var i = 0; i < bolas.length - 1; i++) {
          //console.log("ruedaBola " + bolas[i].innerHTML);
          bolas[i].classList.add("ruedaBola");
        }
        //console.log("------------------ ");
        await this.sleep(500);

        for (var i = 0; i < bolas.length - 1; i++) {
          bolas[i].classList.remove("ruedaBola");
        }

      }
    },
  });
</script>